# This file was auto-generated by generate_pymodels.py

import models

class PyModelBase:
    
    @staticmethod
    def __import__(data):
        raise NotImplementedError
        
    def __export__(self):
        raise NotImplementedError
    
    def __eq__(self, other):
        return self.__dict__ == other.__dict__
    
    def __cmp__(self, other):
        return self.__dict__ == other.__dict__


class Class(PyModelBase):
    def __init__(self, ID, className, classCode, periodCode, section, room, instructor, slotsRemaining):
        self.ID=ID
        self.className=className
        self.classCode=classCode
        self.periodCode=periodCode
        self.section=section
        self.room=room
        self.instructor=instructor
        self.slotsRemaining=slotsRemaining
        
    @staticmethod
    def __import__(data):
        if type(data) is not models.Class or data is None:
            raise Exception("Invalid argument to __import__")

        return Class(data.ID, data.className, data.classCode, data.periodCode, data.section, data.room, data.instructor, data.slotsRemaining)
        
    def __export__(self):
        return models.Class(ID=self.ID, className=self.className, classCode=self.classCode, periodCode=self.periodCode, section=self.section, room=self.room, instructor=self.instructor, slotsRemaining=self.slotsRemaining)


class Student(PyModelBase):
    def __init__(self, ID, name, graduatingClass, studentId, sex, cluster, priority):
        self.ID=ID
        self.name=name
        self.graduatingClass=graduatingClass
        self.studentId=studentId
        self.sex=sex
        self.cluster=cluster
        self.priority=priority
        
    @staticmethod
    def __import__(data):
        if type(data) is not models.Student or data is None:
            raise Exception("Invalid argument to __import__")

        return Student(data.ID, data.name, data.graduatingClass, data.studentId, data.sex, data.cluster, data.priority)
        
    def __export__(self):
        return models.Student(ID=self.ID, name=self.name, graduatingClass=self.graduatingClass, studentId=self.studentId, sex=self.sex, cluster=self.cluster, priority=self.priority)


class Schedule(PyModelBase):
    def __init__(self, ID, student, _class):
        self.ID=ID
        self.student=student
        self._class=_class
        
    @staticmethod
    def __import__(data):
        if type(data) is not models.Schedule or data is None:
            raise Exception("Invalid argument to __import__")

        return Schedule(data.ID, data.student, data._class)
        
    def __export__(self):
        return models.Schedule(ID=self.ID, student=self.student, _class=self._class)


class Request(PyModelBase):
    def __init__(self, ID, student, yearlong1, yearlong2, yearlong3, yearlong4, engElectiveTop, engElective1, engElective2, engElective3, engElective4, engElective5, termContained1, cont1alt1, cont1alt2, cont1alt3, cont1alt4, termContained2, cont2alt1, cont2alt2, cont2alt3, cont2alt4, termContained3, cont3alt1, cont3alt2, cont3alt3, cont3alt4, termContained4, cont4alt1, cont4alt2, cont4alt3, cont4alt4, termContained5, cont5alt1, cont5alt2, cont5alt3, cont5alt4, courseLoad, course6, topPriority):
        self.ID=ID
        self.student=student
        self.yearlong1=yearlong1
        self.yearlong2=yearlong2
        self.yearlong3=yearlong3
        self.yearlong4=yearlong4
        self.engElectiveTop=engElectiveTop
        self.engElective1=engElective1
        self.engElective2=engElective2
        self.engElective3=engElective3
        self.engElective4=engElective4
        self.engElective5=engElective5
        self.termContained1=termContained1
        self.cont1alt1=cont1alt1
        self.cont1alt2=cont1alt2
        self.cont1alt3=cont1alt3
        self.cont1alt4=cont1alt4
        self.termContained2=termContained2
        self.cont2alt1=cont2alt1
        self.cont2alt2=cont2alt2
        self.cont2alt3=cont2alt3
        self.cont2alt4=cont2alt4
        self.termContained3=termContained3
        self.cont3alt1=cont3alt1
        self.cont3alt2=cont3alt2
        self.cont3alt3=cont3alt3
        self.cont3alt4=cont3alt4
        self.termContained4=termContained4
        self.cont4alt1=cont4alt1
        self.cont4alt2=cont4alt2
        self.cont4alt3=cont4alt3
        self.cont4alt4=cont4alt4
        self.termContained5=termContained5
        self.cont5alt1=cont5alt1
        self.cont5alt2=cont5alt2
        self.cont5alt3=cont5alt3
        self.cont5alt4=cont5alt4
        self.courseLoad=courseLoad
        self.course6=course6
        self.topPriority=topPriority
        
    @staticmethod
    def __import__(data):
        if type(data) is not models.Request or data is None:
            raise Exception("Invalid argument to __import__")

        return Request(data.ID, data.student, data.yearlong1, data.yearlong2, data.yearlong3, data.yearlong4, data.engElectiveTop, data.engElective1, data.engElective2, data.engElective3, data.engElective4, data.engElective5, data.termContained1, data.cont1alt1, data.cont1alt2, data.cont1alt3, data.cont1alt4, data.termContained2, data.cont2alt1, data.cont2alt2, data.cont2alt3, data.cont2alt4, data.termContained3, data.cont3alt1, data.cont3alt2, data.cont3alt3, data.cont3alt4, data.termContained4, data.cont4alt1, data.cont4alt2, data.cont4alt3, data.cont4alt4, data.termContained5, data.cont5alt1, data.cont5alt2, data.cont5alt3, data.cont5alt4, data.courseLoad, data.course6, data.topPriority)
        
    def __export__(self):
        return models.Request(ID=self.ID, student=self.student, yearlong1=self.yearlong1, yearlong2=self.yearlong2, yearlong3=self.yearlong3, yearlong4=self.yearlong4, engElectiveTop=self.engElectiveTop, engElective1=self.engElective1, engElective2=self.engElective2, engElective3=self.engElective3, engElective4=self.engElective4, engElective5=self.engElective5, termContained1=self.termContained1, cont1alt1=self.cont1alt1, cont1alt2=self.cont1alt2, cont1alt3=self.cont1alt3, cont1alt4=self.cont1alt4, termContained2=self.termContained2, cont2alt1=self.cont2alt1, cont2alt2=self.cont2alt2, cont2alt3=self.cont2alt3, cont2alt4=self.cont2alt4, termContained3=self.termContained3, cont3alt1=self.cont3alt1, cont3alt2=self.cont3alt2, cont3alt3=self.cont3alt3, cont3alt4=self.cont3alt4, termContained4=self.termContained4, cont4alt1=self.cont4alt1, cont4alt2=self.cont4alt2, cont4alt3=self.cont4alt3, cont4alt4=self.cont4alt4, termContained5=self.termContained5, cont5alt1=self.cont5alt1, cont5alt2=self.cont5alt2, cont5alt3=self.cont5alt3, cont5alt4=self.cont5alt4, courseLoad=self.courseLoad, course6=self.course6, topPriority=self.topPriority)

